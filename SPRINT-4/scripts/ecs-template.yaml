AWSTemplateFormatVersion: 2010-09-09
Description: ECS Template

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
    Default: "vpc-601f8805"
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet list
    Default: "subnet-f3335c96,subnet-57941920,subnet-a654f5ff,subnet-6f1ac044"
  MaxSize:
    Type: Number
    Description: Maximum number of instances to be launched in the ECS cluster.
    Default: "1"
  DesiredCapacity:
    Type: Number
    Description: Number of instances to launch in the ECS cluster.
    Default: "1"
  AMIID:
    Type: String
    Description: AMI for Amazon Linux 2 optimized for ECS
    Default: ami-02b70ab564d80f9e9
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    Default: Sebastian-n

Resources:
  ECRBackend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: sebastian-ecr-backend-cfn
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: sebastian-ecs-cluster-cfn
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref "VpcId"
  EcsSecurityGroupHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "EcsSecurityGroup"
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "EcsSecurityGroup"
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref "EcsSecurityGroup"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ["", [!Ref "AWS::StackName", -ecs-task-definition]]
      ContainerDefinitions:
        - Name: ecs-task-definition-sebastian
          Cpu: 10
          # Image: !Join ["", [!GetAtt ECRBackend.RepositoryUri, ":latest"]]
          Image: nginx:stable
          Memory: 200
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["", [!Ref "AWS::StackName", -ecs-alb]]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets: !Ref "SubnetId"
      SecurityGroups: [!Ref "EcsSecurityGroup"]
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref "ECSTG"
      LoadBalancerArn: !Ref "ECSALB"
      Port: 80
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref "ALBListener"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "ECSTG"
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: [/]
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ["", [!Ref "AWS::StackName", -ecstg]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VpcId"
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: !Ref "MaxSize"
      MinSize: "1"
      VPCZoneIdentifier: !Ref "SubnetId"
      LaunchConfigurationName: !Ref "ContainerInstances"
      DesiredCapacity: !Ref "DesiredCapacity"
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref "AMIID"
      InstanceType: !Ref "InstanceType"
      SecurityGroups: [!Ref "EcsSecurityGroup"]
      IamInstanceProfile: !Ref "EC2InstanceProfile"
      KeyName: !Ref "KeyName"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref "ECSCluster"
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: ecs-task-definition-sebastian
          ContainerPort: 80
          TargetGroupArn: !Ref "ECSTG"
      Role: !Ref "ECSServiceRole"
      TaskDefinition: !Ref "taskdefinition"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                  ]
                Resource: "*"
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId:
        !Join ["", [service/, !Ref "ECSCluster", /, !GetAtt [service, Name]]]
      RoleArn: !GetAtt [AutoScalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService",
                  ]
                Resource: "*
